#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Fri Aug 16 08:06:53 2013

import wx
import wx.grid
import datetime
import random
from eventTable import EventTable

# begin wxGlade: extracode
# end wxGlade


class LifeHistoryMainFrame(wx.Frame):
    def __init__(self, model, *args, **kwds):
        self.model = model
        # begin wxGlade: LifeHistoryMainFrame.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.FRAME_NO_TASKBAR | wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.ScrolledWindow(self, -1, style=wx.TAB_TRAVERSAL)
        self.eventGrid = wx.grid.Grid(self.panel_1, -1, size=(1, 1))
        self.btnPrev = wx.Button(self, -1, "<")
        self.btnNext = wx.Button(self, -1, ">")
        self.image = wx.StaticBitmap(self, -1, wx.NullBitmap)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onPrevImage, self.btnPrev)
        self.Bind(wx.EVT_BUTTON, self.onNextImage, self.btnNext)
        # end wxGlade
        
    def __set_properties(self):
        # begin wxGlade: LifeHistoryMainFrame.__set_properties
        self.SetTitle("Life History")
        self.SetSize((400, 500))
        self.eventGrid.CreateGrid(3, 2)
        self.eventGrid.SetRowLabelSize(0)
        self.eventGrid.SetColLabelSize(0)
        self.eventGrid.EnableEditing(0)
        self.eventGrid.EnableGridLines(0)
        self.eventGrid.EnableDragColSize(0)
        self.eventGrid.EnableDragRowSize(0)
        self.eventGrid.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.eventGrid.SetForegroundColour(wx.Colour(33, 33, 33))
        self.eventGrid.Enable(False)
        self.panel_1.SetScrollRate(10, 10)
        # end wxGlade
        self.updateEvents()
        
    def __do_layout(self):
        # begin wxGlade: LifeHistoryMainFrame.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.eventGrid, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_1)
        sizer_3.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer_4.Add(self.btnPrev, 0, 0, 0)
        sizer_4.Add(self.btnNext, 0, 0, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_3.Add(self.image, 0, wx.FIXED_MINSIZE, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        self.Centre()
        # end wxGlade
        # extend 2nd column to fit the window size
        width = self.eventGrid.GetClientSize().GetWidth() - self.eventGrid.GetColSize(0)
        self.eventGrid.SetColSize(1, width - 15)
        self.eventGrid.SetRowSize(1, 50)
        self.eventGrid.AutoSizeRow( 1 )
        self.SetSizeHints(minW=400, maxW=400, minH=400)

    def updateEvents(self):
    	print 'reading events...'
        events = self.model.getEventsForDate(datetime.date.today())
        eventTable = EventTable()
        eventTable.events = events['text']
        self.eventGrid.SetTable(eventTable)
        self.imageList = events['image']
        if len(self.imageList ) > 0:
            self.pictureId = random.randrange(len(self.imageList ))
            self.displaySelectedImage()
            
    def displaySelectedImage(self):
        filename = self.imageList[self.pictureId].content
        bitmap = self.scaleImage(filename)            
        self.image.SetBitmap(wx.BitmapFromImage(bitmap))
        # TODO: center the bitmap
            
    def scaleImage(self, filename):
        img = wx.Image(filename, wx.BITMAP_TYPE_ANY)
        W = img.GetWidth()
        H = img.GetHeight()
        if W > H:
            PhotoMaxSize = self.GetSize().width
            NewW = PhotoMaxSize
            NewH = PhotoMaxSize * H / W
        else:
            PhotoMaxSize = self.GetSize().width * 0.75
            NewH = PhotoMaxSize
            NewW = PhotoMaxSize * W / H
        return img.Scale(NewW,NewH)

    def onPrevImage(self, event):  # wxGlade: LifeHistoryMainFrame.<event_handler>
        self.pictureId = self.pictureId - 1 if self.pictureId > 0 else len(self.imageList) - 1
        self.displaySelectedImage()

    def onNextImage(self, event):  # wxGlade: LifeHistoryMainFrame.<event_handler>
        self.pictureId = self.pictureId + 1 if self.pictureId < len(self.imageList) - 1 else 0
        self.displaySelectedImage()

# end of class LifeHistoryMainFrame
class LifeHistoryApp(wx.App):
    def __init__(self, arg, model):
        self.model = model
        wx.App.__init__(self, arg)        
  
    def OnInit(self):
        wx.InitAllImageHandlers()
        mainFrame = LifeHistoryMainFrame(self.model, None, -1, "")
        self.SetTopWindow(mainFrame)
        mainFrame.Show()
        return 1

# end of class LifeHistoryApp